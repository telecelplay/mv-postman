{
  "code" : "org.meveo.postman.PostmanProcessor",
  "description" : "Execute postman scripts",
  "inputs" : [ {
    "name" : "stopOnError",
    "type" : "boolean"
  }, {
    "name" : "trustAllCertificates",
    "type" : "boolean"
  }, {
    "name" : "postmanJsonCollection",
    "type" : "String"
  } ],
  "outputs" : [ {
    "name" : "postmanJsonCollection",
    "type" : "String"
  }, {
    "name" : "totalRequest",
    "type" : "int"
  }, {
    "name" : "failedRequest",
    "type" : "int"
  }, {
    "name" : "totalTest",
    "type" : "int"
  }, {
    "name" : "failedTest",
    "type" : "int"
  }, {
    "name" : "failedRequestName",
    "type" : "List<String>"
  }, {
    "name" : "failedTestName",
    "type" : "List<String>"
  } ],
  "generateOutputs" : false,
  "type" : "JAVA",
  "transactionType" : "SAME",
  "script" : "package org.meveo.postman;\r\n\r\nimport org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;\r\nimport org.jboss.resteasy.client.jaxrs.internal.ResteasyClientBuilderImpl;\r\nimport org.jboss.resteasy.plugins.providers.multipart.MultipartFormDataOutput;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\n\r\nimport org.apache.commons.codec.binary.Base64;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\n\r\nimport javax.script.*;\r\n\r\nimport javax.ws.rs.client.*;\r\nimport javax.ws.rs.core.*;\r\nimport java.io.*;\r\nimport java.nio.charset.Charset;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.*;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.Map;\r\n\r\nimport org.meveo.service.script.Script;\r\nimport org.meveo.admin.exception.BusinessException;\r\n\r\npublic class PostmanProcessor extends Script {\r\n\t\r\n\tfinal static Logger log = LoggerFactory.getLogger(PostmanProcessor.class);\r\n\r\n\tprivate Pattern postmanVarPattern = Pattern.compile(\"\\\\{\\\\{[^\\\\}]+\\\\}\\\\}\");\r\n\tprivate Map<String,Object> context;\r\n\tprivate ScriptEngine jsEngine;\r\n\tprivate CookieRegister cookieRegister;\r\n\r\n\t//input\r\n\tprivate String postmanJsonCollection;\r\n\tprivate boolean stopOnError=true;\r\n\tprivate boolean trustAllCertificates;\r\n\r\n\t//output\r\n\tprivate int totalRequest = 0;\r\n\tprivate int failedRequest = 0;\r\n\tprivate int totalTest = 0;\r\n\tprivate int failedTest = 0;\r\n\tprivate List<String> failedRequestName = new ArrayList<>();\r\n\tprivate List<String> failedTestName = new ArrayList<>();\r\n\r\n\tpublic class PSContext {\r\n\t\tMap<String,Object> context;\r\n\r\n\t\tpublic PSContext(Map<String,Object> context){\r\n\t\t\tthis.context=context;\r\n\t\t}\r\n\r\n\t\tpublic Object get(String key) {\r\n\t\t\tlog.debug(\"getting \" + key);\r\n\t\t\treturn context.get(key);\r\n\t\t}\r\n\r\n\t\tpublic void set(String key, Object value) {\r\n\t\t\tlog.info(\"setting \" + key + \" to :\" + value);\r\n\t\t\tcontext.put(key, value);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate class CookieRegister implements ClientRequestFilter{\r\n\t\tprivate Map<String,Cookie> cookieMap = new HashMap<>();\r\n\r\n\t\tpublic void addCookiesFromResponse(Response response){\r\n\t\t\tcookieMap.putAll(response.getCookies());\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic void filter(ClientRequestContext clientRequestContext) throws IOException {\r\n\t\t\tif(cookieMap.size()>0){\r\n\t\t\t\tArrayList<Object> cookie=new ArrayList<>(cookieMap.values());\r\n\t\t\t\tclientRequestContext.getHeaders().put(\"Cookie\",cookie );\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate class LoggingFilter implements ClientRequestFilter {\r\n\t\t@Override\r\n\t\tpublic void filter(ClientRequestContext requestContext) throws IOException {\r\n\t\t\tlog.info(requestContext.getEntity().toString());\r\n\t\t\tlog.info(\"Headers      : {}\", requestContext.getHeaders());\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void loadEnvironment(String filename,Map<String, Object> context) throws IOException {\r\n\t\tString postmanEnv = new String ( Files.readAllBytes( Paths.get(filename) ) );\r\n\t\tObjectMapper mapper = new ObjectMapper();\r\n\t\tMap<String, Object> map = mapper.readValue(postmanEnv, Map.class);\r\n\t\tlog.info(\"load Postman environment \"+map.get(\"name\"));\r\n\t\tArrayList<Object> values = (ArrayList<Object>)map.get(\"values\");\r\n\t\tfor(Object rawValue : values) {\r\n\t\t\tMap<String, Object> value = (Map<String, Object>) rawValue;\r\n\t\t\tBoolean enabled = (Boolean)value.get(\"enabled\");\r\n\t\t\tif(enabled){\r\n\t\t\t\tString key=(String)value.get(\"key\");\r\n\t\t\t\tObject val=value.get(\"value\");\r\n\t\t\t\tcontext.put(key,val);\r\n\t\t\t\tlog.debug(\"Added \"+key+\" => \"+val+ \" to context\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n\t@Override\r\n\tpublic void execute(Map<String,Object> context) throws BusinessException {      \r\n\t\tthis.context=context;\r\n      \t\r\n      \t//if(args.length<2){\r\n        //    log.warn(\"usage : java -jar meveoman.jar <collectionFilename> <environmentFilename> [trustAllCertificates]\");\r\n        //    System.out.println(\"  <collectionFilename>: filename (including path) of the postman 2.1 collection json file.\");\r\n        //    System.out.println(\"  <environmentFilename>: filename (including path) the postmane environment json file to load and initialize the context.\");\r\n        //    System.out.println(\"  trustAllCertificates: if this param is set then ssl certificates are not checked.\");\r\n        //}\r\n      \r\n        //PostmanRunnerScript runner  = new PostmanRunnerScript();\r\n        //System.out.println(\"Load collection \"+args[0]+ \" and init context with env file \"+args[1]);\r\n        //try {\r\n            //String postmanCollection = new String ( Files.readAllBytes( Paths.get(args[0]) ) );\r\n            //runner.setPostmanJsonCollection(postmanCollection);\r\n            //runner.setStopOnError(true);\r\n            //if(args.length==3 && \"trustAllCertificates\".equals(args[2])) {\r\n            //    runner.setTrustAllCertificates(true);\r\n            //}\r\n            //Map<String,Object> context = new HashMap<>();\r\n            //runner.loadEnvironment(args[1],context);\r\n            //runner.execute(context);\r\n        //} catch (IOException e) {\r\n        //    e.printStackTrace();\r\n        //}\r\n      \r\n\t\ttry {\r\n\t\t\tjsEngine = new ScriptEngineManager().getEngineByName(\"graal.js\");\r\n\t\t\tBindings bindings = jsEngine.createBindings();\r\n\t\t\tbindings.put(\"polyglot.js.allowAllAccess\", true);\r\n\t\t\tcontext.forEach((k, v) -> {\r\n\t\t\t\tif (v instanceof Integer) {\r\n\t\t\t\t\tbindings.put(k, (int) v);\r\n\t\t\t\t} else if (v instanceof Double) {\r\n\t\t\t\t\tbindings.put(k, (double) v);\r\n\t\t\t\t} else if (v instanceof Boolean) {\r\n\t\t\t\t\tbindings.put(k, (boolean) v);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbindings.put(k,v.toString());//might be better to serialized to json in all cases ?\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tbindings.put(\"context\",new PSContext(context));\r\n\t\t\tScriptContext scriptContext = new SimpleScriptContext();\r\n\t\t\tscriptContext.setBindings(bindings,ScriptContext.GLOBAL_SCOPE);\r\n\t\t\tjsEngine.setContext(scriptContext);\r\n\r\n\t\t\tcookieRegister = new CookieRegister();\r\n\r\n\t\t\tObjectMapper mapper = new ObjectMapper();\r\n\t\t\tMap<String, Object> map = mapper.readValue(postmanJsonCollection, Map.class);\r\n\t\t\tMap<String, Object> info = (Map<String, Object>)map.get(\"info\");\r\n\t\t\tlog.info(\"executing collection :\"+info.get(\"name\"));\r\n\t\t\tArrayList<Object> items= (ArrayList<Object>)map.get(\"item\");\r\n\t\t\texecuteItemList(items);\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void executeItemList(ArrayList<Object> items) {\r\n\t\tlog.debug(\"items  :\"+items.size());\r\n\t\tfor(Object rawItem : items){\r\n\t\t\tMap<String,Object> item = (Map<String,Object>)rawItem;\r\n\t\t\tboolean isSection=item.containsKey(\"item\");\r\n\t\t\tlog.info(\"executing \"+(isSection?\"section\":\"test\")+\" :\"+item.get(\"name\"));\r\n\t\t\ttry {\r\n\t\t\t\tArrayList<Object> events = (ArrayList<Object>)item.get(\"event\");\r\n\t\t\t\tif(events!=null) {\r\n\t\t\t\t\texecuteEvent((String) item.get(\"name\"), \"prerequest\", events);\r\n\t\t\t\t}\r\n\t\t\t\tif(isSection){\r\n\t\t\t\t\tArrayList<Object> itemList= (ArrayList<Object>)item.get(\"item\");\r\n\t\t\t\t\texecuteItemList(itemList);\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttotalRequest++;\r\n\t\t\t\t\texecuteItem(item);\r\n\t\t\t\t}\r\n\t\t\t\tif(events!=null) {\r\n\t\t\t\t\texecuteEvent((String) item.get(\"name\"), \"test\", events);\r\n\t\t\t\t}\r\n\t\t\t} catch (ScriptException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\tfailedRequest++;\r\n\t\t\t\tfailedRequestName.add((String) item.get(\"name\"));\r\n\t\t\t\tif (stopOnError) {\r\n\t\t\t\t\tthrow new RuntimeException(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Object getValueByKey(String key,ArrayList<Object> list){\r\n\t\tfor(Object rawParam : list) {\r\n\t\t\tMap<String,Object> param = (Map<String,Object>)rawParam;\r\n\t\t\tif(key.equals(param.get(\"key\"))) {\r\n\t\t\t\treturn param.get(\"value\");\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n  \r\n\tprivate void executeItem(Map<String,Object> item) throws ScriptException {\r\n\t\tlog.debug(\"executing item :\"+item.get(\"name\"));\r\n\t\tResteasyClientBuilder builder= new ResteasyClientBuilderImpl();\r\n\t\tif (trustAllCertificates) {\r\n\t\t\tbuilder.disableTrustManager();\r\n\t\t}\r\n\t\tClient client = builder.build();\r\n\r\n\t\tclient.register(cookieRegister);\r\n\t\tclient.register(new LoggingFilter());\r\n\r\n\t\tMap<String,Object> request = (Map<String,Object>)item.get(\"request\");\r\n\r\n\t\tMap<String,Object> url = (Map<String,Object>)request.get(\"url\");\r\n\t\tString rawUrl = (String) url.get(\"raw\");\r\n\t\tString resolvedUrl=replaceVars(rawUrl);\r\n\t\tSystem.out.println(\"calling :\"+resolvedUrl);\r\n\t\tWebTarget target = client.target(resolvedUrl);\r\n\t\tInvocation.Builder requestBuilder = target.request();\r\n\t\tif(request.containsKey(\"auth\")){\r\n\t\t\tMap<String,Object> auth = (Map<String, Object>) request.get(\"auth\");\r\n\t\t\tString authType = (String)auth.get(\"type\");\r\n\t\t\tswitch(authType){\r\n\t\t\t\tcase \"bearer\":\r\n\t\t\t\t\tString token = replaceVars ((String)getValueByKey(\"token\",(ArrayList<Object>)auth.get(\"bearer\")));\r\n\t\t\t\t\tlog.info(\"Set bearer token to \"+token);\r\n\t\t\t\t\trequestBuilder.header(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"basic\":\r\n\t\t\t\t\tString password = replaceVars ((String)getValueByKey(\"password\",(ArrayList<Object>)auth.get(\"basic\")));\r\n\t\t\t\t\tString username = replaceVars ((String)getValueByKey(\"username\",(ArrayList<Object>)auth.get(\"basic\")));\r\n\t\t\t\t\tbyte[] encodedAuth = Base64.encodeBase64((username + \":\" + password).getBytes(Charset.forName(\"ISO-8859-1\")));\r\n\t\t\t\t\trequestBuilder.header(HttpHeaders.AUTHORIZATION, \"Basic \" + new String(encodedAuth));\r\n\t\t\t}\r\n\t\t}\r\n\t\tif(request.containsKey(\"header\")){\r\n\t\t\tArrayList<Object> headers = (ArrayList<Object>) request.get(\"header\");\r\n\t\t\tfor(Object rawParam : headers) {\r\n\t\t\t\tMap<String,Object> param = (Map<String,Object>)rawParam;\r\n\t\t\t\tString val = replaceVars((String)param.get(\"value\"));\r\n\t\t\t\tlog.info(\"add header \"+param.get(\"key\")+\" = \"+val);\r\n\t\t\t\trequestBuilder.header((String)param.get(\"key\"), val);\r\n\t\t\t}\r\n\t\t}\r\n\t\tResponse response=null;\r\n\t\tif(\"GET\".equals(request.get(\"method\"))){\r\n\t\t\tresponse = requestBuilder.get();\r\n\t\t} else if(\"POST\".equals(request.get(\"method\"))||\"PUT\".equals(request.get(\"method\"))){\r\n\t\t\tEntity<?> entity=null;\r\n\t\t\tMap<String,Object> body = (Map<String, Object>) request.get(\"body\");\r\n\t\t\tif(\"urlencoded\".equals(body.get(\"mode\"))) {\r\n\t\t\t\tArrayList<Object> formdata = (ArrayList<Object>) body.get(\"urlencoded\");\r\n\t\t\t\tForm form = new Form();\r\n\t\t\t\tfor(Object rawParam : formdata) {\r\n\t\t\t\t\tMap<String,Object> param = (Map<String,Object>)rawParam;\r\n\t\t\t\t\tform.param((String)param.get(\"key\"), replaceVars((String)param.get(\"value\")));\r\n\t\t\t\t}\r\n\t\t\t\tentity = Entity.form(form);\r\n\t\t\t} else if(\"formdata\".equals(body.get(\"mode\"))) {\r\n\t\t\t\tArrayList<Object> formdata = (ArrayList<Object>) body.get(body.get(\"mode\"));\r\n\t\t\t\tMultipartFormDataOutput mdo = new MultipartFormDataOutput();\r\n\t\t\t\tfor(Object rawParam : formdata) {\r\n\t\t\t\t\tMap<String,Object> param = (Map<String,Object>)rawParam;\r\n\t\t\t\t\tif(\"file\".equals(param.get(\"type\"))){\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tmdo.addFormData((String)param.get(\"key\"), new FileInputStream(new File(replaceVars((String)param.get(\"value\")))),\r\n\t\t\t\t\t\t\t\t\tMediaType.APPLICATION_OCTET_STREAM_TYPE);\r\n\t\t\t\t\t\t} catch (FileNotFoundException e) {\r\n\t\t\t\t\t\t\tresponse.close();\r\n\t\t\t\t\t\t\tthrow new ScriptException(\"cannot read file : \"+request.get(\"method\"));\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tMediaType mediaType = MediaType.TEXT_PLAIN_TYPE;\r\n\t\t\t\t\t\ttry{\r\n\t\t\t\t\t\t\tMediaType.valueOf((String)param.get(\"contentType\"));\r\n\t\t\t\t\t\t} catch (Exception e){\r\n\t\t\t\t\t\t\tmediaType = MediaType.TEXT_PLAIN_TYPE;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tmdo.addFormData((String)param.get(\"key\"),replaceVars((String)param.get(\"value\")),mediaType);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tentity = Entity.entity(mdo, MediaType.MULTIPART_FORM_DATA_TYPE);\r\n\t\t\t} else if(\"raw\".equals(body.get(\"mode\"))){\r\n\t\t\t\tentity = Entity.text(replaceVars((String)body.get(\"raw\")));\r\n\t\t\t} else if(\"file\".equals(body.get(\"mode\"))){\r\n\t\t\t\tMap<String,Object> file = (Map<String, Object>) request.get(\"file\");\r\n\t\t\t\tMultipartFormDataOutput mdo = new MultipartFormDataOutput();\r\n\t\t\t\ttry {\r\n\t\t\t\t\tmdo.addFormData(\"file\", new FileInputStream(new File(replaceVars((String)file.get(\"src\")))),\r\n\t\t\t\t\t\t\tMediaType.APPLICATION_OCTET_STREAM_TYPE); //NOTE we allow to use variables in the file src\r\n\t\t\t\t} catch (FileNotFoundException e) {\r\n\t\t\t\t\tresponse.close();\r\n\t\t\t\t\tthrow new ScriptException(\"cannot read file : \"+request.get(\"method\"));\r\n\t\t\t\t}\r\n\t\t\t\tentity = Entity.entity(mdo, MediaType.MULTIPART_FORM_DATA_TYPE);\r\n\t\t\t}\r\n\t\t\tif(\"POST\".equals(request.get(\"method\"))) {\r\n\t\t\t\tresponse = requestBuilder.post(entity);\r\n\t\t\t} else {\r\n\t\t\t\tresponse = requestBuilder.put(entity);\r\n\t\t\t}\r\n\t\t} else if(\"DELETE\".equals(request.get(\"method\"))){\r\n\t\t\tresponse = requestBuilder.delete();\r\n\t\t}\r\n\t\tif(response==null) {\r\n\t\t\tresponse.close();\r\n\t\t\tthrow new ScriptException(\"invalid request type : \" + request.get(\"method\"));\r\n\t\t}\r\n\t\tlog.debug(\"response status :\"+response.getStatus());\r\n\t\tjsEngine.getContext().setAttribute(\"req_status\",response.getStatus(),ScriptContext.GLOBAL_SCOPE);\r\n\t\tif(response.getStatus()>=300){\r\n\t\t\tresponse.close();\r\n\t\t\tthrow new ScriptException(\"response status \"+response.getStatus());\r\n\t\t}\r\n\t\tcookieRegister.addCookiesFromResponse(response);\r\n\t\tString value = response.readEntity(String.class);\r\n\t\tlog.info(\"response  :\"+value);\r\n\t\tresponse.close();\r\n\t\tjsEngine.getContext().setAttribute(\"req_response\",value,ScriptContext.GLOBAL_SCOPE);\r\n\t}\r\n\r\n\tpublic String replaceVars(String input){\r\n\t\tStringBuffer result=new StringBuffer();\r\n\t\tMatcher matcher= postmanVarPattern.matcher(input);\r\n\t\twhile (matcher.find()) {\r\n\t\t\tString replacement=\"\";\r\n\t\t\tString var =matcher.group(0).substring(2);\r\n\t\t\tvar = var.substring(0,var.length()-2);\r\n\t\t\tif(context.containsKey(var)){\r\n\t\t\t\treplacement=context.get(var).toString();\r\n\t\t\t}\r\n\t\t\tmatcher.appendReplacement(result,replacement);\r\n\t\t\tlog.debug(\"replaced :\"+matcher.group(0)+\" by \"+replacement);\r\n\t\t}\r\n\t\tmatcher.appendTail(result);\r\n\t\treturn result.toString();\r\n\t}\r\n\r\n\tpublic void executeEvent(String itemName,String eventName,ArrayList<Object> events) throws ScriptException {\r\n\t\tfor (Object e : events) {\r\n\t\t\tMap<String,Object> event = (Map<String,Object>) e;\r\n\t\t\tString listen = (String)(event.get(\"listen\"));\r\n\t\t\tif (eventName.equals(listen)) {\r\n\t\t\t\tMap<String,Object> script = (Map<String,Object>)event.get(\"script\");\r\n\t\t\t\tif(\"text/javascript\".equals(script.get(\"type\"))) {\r\n\t\t\t\t\tlog.debug(\"exec class:\"+script.get(\"exec\").getClass());\r\n\t\t\t\t\tArrayList<Object> exec =(ArrayList<Object>)script.get(\"exec\");\r\n\t\t\t\t\tStringBuilder sb = new StringBuilder();\r\n\t\t\t\t\tfor(Object line:exec){\r\n\t\t\t\t\t\tsb.append((String)line);\r\n\t\t\t\t\t\tsb.append(\"\\n\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tString scriptSource=sb.toString();\r\n\r\n\t\t\t\t\tString preSecript=\"var pm={};\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info={};\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info.eventName='\"+eventName+\"';\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info.iteration=1;\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info.iterationCount=1;\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info.requestName='\"+itemName+\"';\\n\" +\r\n\t\t\t\t\t\t\t\"pm.info.requestId='\"+event.get(\"id\")+\"';\\n\" +\r\n\t\t\t\t\t\t\t\"pm.environment=context;\\n\"+\r\n\t\t\t\t\t\t\t\"pm.test = function(s,f){\\n\" +\r\n\t\t\t\t\t\t\t\"let result = null;\\n\" +\r\n\t\t\t\t\t\t\t\"try{ result=f(); }\\n\" +\r\n\t\t\t\t\t\t\t\"catch(error){throw 'test failed: '+s+' reason: '+error};\\n\" +\r\n\t\t\t\t\t\t\t\"if(result != undefined){;\\n\" +\r\n\t\t\t\t\t\t\t\"if(!result){throw 'test failed: '+s;}\"+\r\n\t\t\t\t\t\t\t\"};\\n\" +\r\n\t\t\t\t\t\t\t\"};\";\r\n\t\t\t\t\tif(\"test\".equals(eventName)){\r\n\t\t\t\t\t\tpreSecript+=\"pm.response = {};\\n\" +\r\n\t\t\t\t\t\t\t\t\"pm.response.text=function(){ return req_response};\\n\" +\r\n\t\t\t\t\t\t\t\t\"pm.response.json=function(){ return JSON.parse(req_response)};\"+\r\n\t\t\t\t\t\t\t\t\"pm.response.to={};\\n\"+\r\n\t\t\t\t\t\t\t\t\"pm.response.to.have={};\\n\"+\r\n\t\t\t\t\t\t\t\t\"pm.response.to.have.status=function(status){if(status!=req_status){throw 'invalid status'+s}};\\n\"+\r\n\t\t\t\t\t\t\t\t\"pm.response.to.be={};\\n\"+\r\n\t\t\t\t\t\t\t\t\"pm.response.to.be.oneOf=function(status){if(!status.includes(req_status)){throw 'invalid status'+s}};\\n\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscriptSource =preSecript+scriptSource;\r\n\t\t\t\t\tlog.info(\"script = \"+scriptSource);\r\n\t\t\t\t\tjsEngine.eval(scriptSource);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void setStopOnError(boolean stopOnError){\r\n\t\tthis.stopOnError=stopOnError;\r\n\t}\r\n\r\n\tpublic void setTrustAllCertificates(boolean trustAllCertificates){\r\n\t\tthis.trustAllCertificates=trustAllCertificates;\r\n\t}\r\n\r\n\tpublic void setPostmanJsonCollection(String postmanJsonCollection) {\r\n\t\tthis.postmanJsonCollection = postmanJsonCollection;\r\n\t}\r\n\r\n\tpublic String getPostmanJsonCollection() {\r\n\t\treturn postmanJsonCollection;\r\n\t}\r\n\r\n\tpublic int getTotalRequest() {\r\n\t\treturn totalRequest;\r\n\t}\r\n\r\n\tpublic int getFailedRequest() {\r\n\t\treturn failedRequest;\r\n\t}\r\n\r\n\tpublic int getTotalTest() {\r\n\t\treturn totalTest;\r\n\t}\r\n\r\n\tpublic int getFailedTest() {\r\n\t\treturn failedTest;\r\n\t}\r\n\r\n\tpublic List<String> getFailedRequestName() {\r\n\t\treturn failedRequestName;\r\n\t}\r\n\r\n\tpublic List<String> getFailedTestName() {\r\n\t\treturn failedTestName;\r\n\t}\r\n}",
  "executionRoles" : [ ],
  "sourcingRoles" : [ ],
  "mavenDependencies" : [ ],
  "importScriptInstances" : [ ]
}